import x68k
import machine
import uctypes
import random
import time
from struct import pack

# SpriteUtil class
class SpriteUtil:

  def init(self, clear_and_on=True):
    x68k.iocs(x68k.i.SP_INIT)
    if clear_and_on:
      for i in range(256):
        x68k.iocs(x68k.i.SP_CGCLR, d1=i)
      x68k.iocs(x68k.i.SP_ON)   

  def set_palette(self, code, block, color_code, vsync=False):
    if (code < 0 or code > 15 or block < 1 or block > 15):
      raise RuntimeError('incorrect parameter')
    v = 0 if vsync else 1
    x68k.iocs(x68k.i.SPALET, d1=pack('L',(v<<31)|code), d2=block, d3=color_code)
  
  def set_palettes(self, block, color_codes, vsync=0):
    for i, cc in enumerate(color_codes):
      self.set_palette(i, block, cc, vsync)

  def set_pattern(self, code, size, pattern):
    if (size == 0 and len(pattern) != 32) or (size == 1 and len(pattern) != 128):
      raise RuntimeError('incorrect parameter')
    x68k.iocs(x68k.i.SP_DEFCG, d1=code, d2=size, a1=uctypes.addressof(bytes(pattern)))

  def set_patterns(self, code, size, patterns):
    for i, pt in enumerate(patterns):
      self.set_pattern(code+i, size, pt)

  REG_SP_SCROLL  = const(0xEB0000)

  def scroll(self, sprite_no, x, y, pl_block, pt_code, prw, vsync=False):
    if (sprite_no < 0 or sprite_no > 127):
      raise RuntimeError('incorrect parameter')
    #v = 0 if vsync else 1
    #x68k.iocs(x68k.i.SP_REGST, d1=pack('L',(v<<31)|sprite_no), d2=x, d3=y, d4=(pl_block<<8)|pt_code, d5=prw)    
    # as SP_REGST is pretty slow, we directly access sprite scroll registers
    machine.mem16[ REG_SP_SCROLL + sprite_no * 8 + 0 ] = 16 + x
    machine.mem16[ REG_SP_SCROLL + sprite_no * 8 + 2 ] = 16 + y
    machine.mem16[ REG_SP_SCROLL + sprite_no * 8 + 4 ] = (pl_block << 8) | pt_code
    machine.mem16[ REG_SP_SCROLL + sprite_no * 8 + 6 ] = prw

# Ball class
class Ball:

  # ball instance ID
  id = None

  # ball X,Y position
  x = 0
  y = 0

  # ball X,Y delta
  dx = 1
  dy = 1

  # reference to SpriteUtil
  sp_util = None

  # sprite palette data
  sp_palettes = [
    0x0000,0xef3d,0x9ca9,0x0001,0x631b,0xbdb1,0xc5f5,0x7ba1,0x294d,0x83e3,0x9ceb,0x9ceb,0xe6fb,0xa4eb,0xe6fb,0x5ad9,
  ]

  # sprite pattern data
  sp_patterns = [

    # sprite pattern data 0
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0xc1,
     0x00,0x00,0x11,0x11,0x00,0x00,0x11,0x11,0x00,0x01,0x11,0x11,0x00,0xd1,0x11,0x11,
     0x0a,0x51,0x11,0x11,0x0b,0x61,0x11,0x11,0x02,0x61,0x11,0x11,0xd2,0x51,0x11,0x11,
     0xb2,0x56,0x11,0x11,0x22,0x25,0x61,0x11,0x22,0x25,0x61,0x11,0x22,0x22,0x61,0x11,
     0x00,0x0e,0xc1,0x11,0x0c,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
     0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
     0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
     0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11],

    # sprite pattern data 1 
    [0x16,0x5b,0xd0,0x00,0x11,0x11,0x52,0xb0,0x11,0x11,0x16,0x52,0x11,0x11,0x11,0x52,
     0x11,0x11,0x11,0x65,0x11,0x11,0x11,0x65,0x11,0x11,0x11,0x65,0x11,0x11,0x11,0x65,
     0x11,0x11,0x11,0x65,0x11,0x11,0x11,0x15,0x11,0x11,0x11,0x16,0x11,0x11,0x11,0x16,
     0x11,0x11,0x11,0x16,0x11,0x11,0x11,0x16,0x11,0x11,0x11,0x15,0x11,0x11,0x11,0x65,
     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x21,0x00,0x00,0x00,
     0x22,0x4f,0x00,0x00,0x22,0x94,0x00,0x00,0x22,0x24,0x10,0x00,0x22,0x24,0x41,0x00,
     0x22,0x27,0x41,0x00,0x22,0x29,0x44,0x10,0x52,0x22,0x44,0x80,0x52,0x22,0x44,0x81,
     0x52,0x22,0x44,0x81,0x52,0x22,0x44,0x88,0x22,0x22,0x44,0x18,0x22,0x29,0x44,0x88],

    # sprite pattern data 2
    [0x22,0x22,0x51,0x11,0x22,0x22,0x56,0x11,0x22,0x22,0x25,0x61,0xb2,0x22,0x22,0x56,
     0xd2,0x22,0x22,0x25,0x02,0x22,0x22,0x22,0x0b,0x22,0x22,0x22,0x00,0x22,0x22,0x22,
     0x00,0xd5,0x22,0x22,0x00,0x0b,0x62,0x22,0x00,0x00,0x61,0x22,0x00,0x00,0x11,0x15,
     0x00,0x00,0x00,0xc1,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,
     0x66,0x11,0x11,0x11,0x55,0x56,0x61,0x11,0x22,0x55,0x56,0x11,0x22,0x22,0x25,0x56,
     0x22,0x22,0x22,0x25,0x22,0x22,0x22,0x22,0x29,0x77,0x92,0x22,0x22,0x97,0x44,0x44,
     0x16,0x22,0x27,0x74,0x11,0x11,0x52,0x22,0x0e,0x11,0x11,0x11,0x00,0x0e,0xcc,0x11],

    # sprite pattern data 3
    [0x11,0x11,0x11,0x65,0x11,0x11,0x16,0x52,0x11,0x11,0x15,0x52,0x11,0x11,0x65,0x22,
     0x11,0x11,0x65,0x22,0x11,0x11,0x52,0x22,0x11,0x16,0x52,0x22,0x11,0x65,0x22,0x27,
     0x55,0x22,0x22,0x74,0x22,0x22,0x27,0x44,0x22,0x97,0x44,0x44,0x44,0x44,0x44,0x44,
     0x44,0x44,0x44,0x79,0x22,0x22,0x22,0x22,0x16,0x66,0x66,0x10,0x11,0xcc,0xe0,0x00,
     0x22,0x27,0x44,0x88,0x22,0x27,0x44,0x88,0x22,0x94,0x44,0x18,0x22,0x74,0x44,0x11,
     0x29,0x44,0x44,0x41,0x94,0x44,0x44,0x40,0x74,0x44,0x44,0x10,0x44,0x44,0x44,0x00,
     0x44,0x44,0x41,0x00,0x44,0x44,0x10,0x00,0x44,0x44,0x00,0x00,0x47,0x7a,0x00,0x00,
     0x2b,0x00,0x00,0x00,0xd0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
  ]

  # constructor
  def __init__(self, id):
    self.id = id
    if self.__class__.sp_util is None:
      # one time initialization
      sp_util = SpriteUtil()
      sp_util.init()
      sp_util.set_palettes(1, Ball.sp_palettes)
      sp_util.set_patterns(0, 1, Ball.sp_patterns)
      self.__class__.sp_util = sp_util

  # scroll this ball
  def scroll(self):
    sp_util = self.__class__.sp_util
    x = self.x
    y = self.y
    sp_util.scroll(self.id * 4 + 0, x,      y,      1, 0, 3)
    sp_util.scroll(self.id * 4 + 1, x + 16, y,      1, 1, 3)
    sp_util.scroll(self.id * 4 + 2, x,      y + 16, 1, 2, 3)
    sp_util.scroll(self.id * 4 + 3, x + 16, y + 16, 1, 3, 3)

  # set position
  def set_position(self, x, y, dx, dy):
    self.x = x
    self.y = y
    self.dx = dx
    self.dy = dy

  # move this ball
  def move(self, box):
    (x_min, y_min, x_max, y_max) = box
    x = self.x + self.dx
    y = self.y + self.dy

    if self.dx < 0 and x < x_min:
      self.dx *= -1
      self.x = x_min
    elif self.dx > 0 and x + 32 > x_max:
      self.dx *= -1
      self.x = x_max - 32
    else:
      self.x = x

    if self.dy < 0 and y < y_min:
      self.dy *= -1
      self.y = y_min
    elif self.dy > 0 and y + 32 > y_max:
      self.dy *= -1
      self.y = y_max - 32
    else:
      self.y = y
    
    self.dy += 1

# main
def main():

  # randomize
  random.seed(int(time.time() * 10))

  # initialize screen
  x68k.crtmod(12,True)
  x68k.curoff()
  x68k.iocs(x68k.i.TXFILL,a1=pack('6h',0,0,0,1024,1024,0))
  x68k.iocs(x68k.i.TXFILL,a1=pack('6h',1,0,0,1024,1024,0))
  x68k.iocs(x68k.i.BOX,a1=pack('6h',0,0,511,511,0xffff,0xffff))

  # define balls
  balls = []
  for i in range(4):
    b = Ball(i)
    b.set_position(0, 0, random.randint(1,12), random.randint(1,4))
    balls.append(b)

  # supervisor mode
  s = x68k.super()

  while True:

    # check shift key to exit
    if x68k.iocs(x68k.i.B_SFTSNS) & 0x01:
      break

    # scroll balls
    x68k.vsync()
    for b in balls:
      b.move((0,0,511,511))
      b.scroll()

  # user mode
  x68k.super(s)

  # cursor on
  x68k.curon()

if __name__ == "__main__":
  main()
